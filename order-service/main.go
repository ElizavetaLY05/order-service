package main

import (
	"bytes"
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/gorilla/mux"
	_ "github.com/jackc/pgx/v5/stdlib"
	"github.com/nats-io/stan.go"
)

type OrderCache struct {
	mu     sync.RWMutex
	orders map[string]json.RawMessage
}

func NewOrderCache() *OrderCache {
	return &OrderCache{
		orders: make(map[string]json.RawMessage),
	}
}

func (c *OrderCache) Set(uid string, data json.RawMessage) {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.orders[uid] = data
}

func (c *OrderCache) Get(uid string) (json.RawMessage, bool) {
	c.mu.RLock()
	defer c.mu.RUnlock()
	data, ok := c.orders[uid]
	return data, ok
}

func (c *OrderCache) GetAll() map[string]json.RawMessage {
	c.mu.RLock()
	defer c.mu.RUnlock()
	
	// –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	result := make(map[string]json.RawMessage, len(c.orders))
	for k, v := range c.orders {
		result[k] = v
	}
	return result
}

func (c *OrderCache) Size() int {
	c.mu.RLock()
	defer c.mu.RUnlock()
	return len(c.orders)
}

// validateOrder –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON –∑–∞–∫–∞–∑–∞
func validateOrder(data []byte) (string, error) {
	var order struct {
		OrderUID string `json:"order_uid"`
	}
	
	if err := json.Unmarshal(data, &order); err != nil {
		return "", fmt.Errorf("invalid JSON: %v", err)
	}
	
	if order.OrderUID == "" {
		return "", fmt.Errorf("order_uid is required")
	}
	
	return order.OrderUID, nil
}

func main() {
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
	const (
		dbURL          = "postgres://orderuser:orderpass@localhost:5432/orderdb?sslmode=disable"
		natsClusterID  = "test-cluster"
		natsClientID   = "order-service"
		natsSubject    = "orders"
		httpAddr       = ":8080"
	)

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	db, err := sql.Open("pgx", dbURL)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err)
	}
	defer db.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	
	if err := db.PingContext(ctx); err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î:", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
	cache := NewOrderCache()

	// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∏–∑ –ë–î
	log.Println("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∏–∑ –ë–î...")
	rows, err := db.Query("SELECT order_uid, raw_data FROM orders")
	if err != nil {
		log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ –ë–î: %v", err)
	} else {
		defer rows.Close()
		
		count := 0
		for rows.Next() {
			var uid string
			var data json.RawMessage
			if err := rows.Scan(&uid, &data); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏: %v", err)
				continue
			}
			cache.Set(uid, data)
			count++
		}
		
		if err := rows.Err(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º: %v", err)
		}
		
		log.Printf("–ö—ç—à –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d –∑–∞–∫–∞–∑–æ–≤", count)
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS Streaming
	sc, err := stan.Connect(natsClusterID, natsClientID, stan.NatsURL(stan.DefaultNatsURL))
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NATS:", err)
	}
	defer sc.Close()

	// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
	sub, err := sc.Subscribe(natsSubject, func(msg *stan.Msg) {
		log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %d –±–∞–π—Ç", len(msg.Data))
		
		// –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞
		uid, err := validateOrder(msg.Data)
		if err != nil {
			log.Printf("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∑–∞–∫–∞–∑: %v", err)
			return
		}

		// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
		_, err = db.Exec(
			"INSERT INTO orders (order_uid, raw_data) VALUES ($1, $2) ON CONFLICT (order_uid) DO UPDATE SET raw_data = $2",
			uid, msg.Data,
		)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–∞ %s: %v", uid, err)
			return
		}

		// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
		cache.Set(uid, json.RawMessage(msg.Data))
		log.Printf("‚úÖ –ó–∞–∫–∞–∑ %s –æ–±—Ä–∞–±–æ—Ç–∞–Ω", uid)
	}, 
	stan.DurableName("order-durable"),
	stan.SetManualAckMode(),
	stan.AckWait(30*time.Second),
	)
	
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:", err)
	}
	defer sub.Unsubscribe()

	// HTTP —Å–µ—Ä–≤–µ—Ä
	router := mux.NewRouter()

	// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
	router.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		
		orders := cache.GetAll()
		html := `<!DOCTYPE html>
		<html>
		<head>
			<title>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤</title>
			<meta charset="utf-8">
			<style>
				body { font-family: Arial, sans-serif; margin: 40px; }
				.order-list { max-height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; }
				.order-item { margin: 5px 0; }
				.stats { background: #f5f5f5; padding: 10px; border-radius: 5px; }
				pre { background: #f8f8f8; padding: 10px; border-radius: 5px; overflow-x: auto; }
			</style>
		</head>
		<body>
			<h2>üì¶ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤</h2>
			
			<div class="stats">
				<strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong>
				<p>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –∫—ç—à–µ: ` + fmt.Sprintf("%d", len(orders)) + `</p>
				<p>–í—Ä–µ–º—è: ` + time.Now().Format("15:04:05") + `</p>
			</div>

			<h3>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:</h3>
			<div class="order-list">
				<ul>`
		
		for uid := range orders {
			html += `<li class="order-item">
				<a href="/order/` + uid + `" target="_blank">` + uid + `</a>
				| <a href="/order/` + uid + `?format=pretty" target="_blank">(–∫—Ä–∞—Å–∏–≤–æ)</a>
			</li>`
		}
		
		html += `</ul>
			</div>
			
			<hr>
			<h3>API Endpoints:</h3>
			<ul>
				<li><a href="/health">Health Check</a></li>
				<li><a href="/orders">–í—Å–µ –∑–∞–∫–∞–∑—ã (JSON)</a></li>
			</ul>
			
			<h3>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑?</h3>
			<pre>go run publish.go</pre>
			
			<h3>–ü—Ä–∏–º–µ—Ä curl –∑–∞–ø—Ä–æ—Å–∞:</h3>
			<pre>curl http://localhost:8080/order/b563feb7b2b84b6test</pre>
		</body>
		</html>`
		
		w.Write([]byte(html))
	})

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID
	router.HandleFunc("/order/{uid}", func(w http.ResponseWriter, r *http.Request) {
		uid := mux.Vars(r)["uid"]
		
		data, ok := cache.Get(uid)
		if !ok {
			http.Error(w, `{"error": "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"}`, http.StatusNotFound)
			return
		}

		// –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
		if r.URL.Query().Get("format") == "pretty" {
			var prettyJSON bytes.Buffer
			if err := json.Indent(&prettyJSON, data, "", "  "); err != nil {
				http.Error(w, `{"error": "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON"}`, http.StatusInternalServerError)
				return
			}
			
			w.Header().Set("Content-Type", "application/json")
			w.Write(prettyJSON.Bytes())
			return
		}

		w.Header().Set("Content-Type", "application/json")
		w.Write(data)
	})

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
	router.HandleFunc("/orders", func(w http.ResponseWriter, r *http.Request) {
		orders := cache.GetAll()
		
		response := map[string]interface{}{
			"count":  len(orders),
			"orders": orders,
		}
		
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(response)
	})

	// Health check
	router.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		status := map[string]interface{}{
			"status":    "healthy",
			"timestamp": time.Now().UTC(),
			"cache_size": cache.Size(),
		}
		
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(status)
	})

	// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ —Å graceful shutdown
	server := &http.Server{
		Addr:    httpAddr,
		Handler: router,
	}

	// –ö–∞–Ω–∞–ª –¥–ª—è graceful shutdown
	done := make(chan bool, 1)
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		<-quit
		log.Println("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
		
		ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
		defer cancel()
		
		if err := server.Shutdown(ctx); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
		
		close(done)
	}()

	log.Println("üöÄ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	log.Println("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

	if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
		log.Fatalf("–û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	<-done
	log.Println("–°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}